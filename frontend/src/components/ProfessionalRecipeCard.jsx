import React, { useState, useEffect } from 'react';
import { calculateRecipeCost } from '../services/pricingService';
import {
  Dialog, DialogTitle, DialogContent, DialogActions,
  Button, Box, Typography, Grid, Chip, TextField, Paper, Tooltip,
  Table, TableBody, TableCell, TableContainer, TableHead, TableRow
} from '@mui/material';
import {
  Print as PrintIcon,
  Share as ShareIcon,
  Download as DownloadIcon,
  Edit as EditIcon,
  Save as SaveIcon,
  Calculate as CostIcon,
  Close as CloseIcon,
  AttachMoney as MoneyIcon
} from '@mui/icons-material';

const ProfessionalRecipeCard = ({
  open,
  recipe,
  onClose,
  onSave,
  onDelete
}) => {
  const [editMode, setEditMode] = useState(false);
  const [editedRecipe, setEditedRecipe] = useState(recipe?.aiResult || '');
  const [chefNotes, setChefNotes] = useState('');
  const [costCalculatorOpen, setCostCalculatorOpen] = useState(false);

  const [costData, setCostData] = useState({
    totalCost: 0,
    costPerServing: 0,
    laborCost: 0,
    ingredients: []
  });

  if (!recipe) return null;

  // NEW: Updated cost calculation using the pricing service
  const calculateCosts = () => {
    const costData = calculateRecipeCost(recipe);

    return {
      totalCost: costData.totalCost,
      perServing: Math.round(costData.totalCost / (recipe.servings || 4)),
      laborCost: costData.laborCost,
      ingredientCosts: costData.ingredientCosts,
      foodCostPercentage: Math.round((costData.ingredientTotal / costData.totalCost) * 100)
    };
  };

  // Updated handler to use the new calculation
  const handleCostCalculation = () => {
    const costs = calculateCosts();

    setCostData({
      totalCost: costs.totalCost,
      costPerServing: costs.perServing,
      laborCost: costs.laborCost,
      ingredients: costs.ingredientCosts || [],
      servings: recipe.servings || 4,
      foodCostPercentage: costs.foodCostPercentage
    });

    setCostCalculatorOpen(true);
  };

  // Export functions
  const handlePrint = () => {
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
      <html>
        <head>
          <title>${recipe.prompt} - MiseAI Professional Recipe</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
            .header { border-bottom: 3px solid #ff6b35; padding-bottom: 15px; margin-bottom: 25px; }
            .content { white-space: pre-line; background: #f9f9f9; padding: 20px; border-radius: 8px; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>üçΩÔ∏è ${recipe.prompt}</h1>
            <p>Generated: ${new Date(recipe.date).toLocaleString()}</p>
            <p>üî• HACCP Validated Recipe</p>
          </div>
          <div class="content">${recipe.aiResult}</div>
        </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  const handleShare = async () => {
    const shareText = `üçΩÔ∏è ${recipe.prompt}\n\n${recipe.aiResult}\n\nGenerated by MiseAI`;

    if (navigator.share) {
      try {
        await navigator.share({
          title: `Recipe: ${recipe.prompt}`,
          text: shareText
        });
      } catch (err) {
        navigator.clipboard.writeText(shareText);
        alert('Recipe copied to clipboard!');
      }
    } else {
      navigator.clipboard.writeText(shareText);
      alert('Recipe copied to clipboard!');
    }
  };

  const handleSaveEdits = () => {
    onSave({ ...recipe, aiResult: editedRecipe });
    setEditMode(false);
  };

  return (
    <>
      {/* MAIN RECIPE CARD */}
      <Dialog
        open={open}
        onClose={onClose}
        maxWidth="xl"
        fullWidth
        PaperProps={{
          sx: {
            maxHeight: '95vh',
            bgcolor: '#1a1a1a',
            minWidth: '1000px'
          }
        }}
      >
        {/* HEADER */}
        <DialogTitle sx={{
          bgcolor: '#ff6b35',
          color: '#fff',
          p: 3,
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between'
        }}>
          <Box>
            <Typography variant="h5" fontWeight="bold">
              üë®‚Äçüç≥ {recipe.prompt}
            </Typography>
            <Typography variant="subtitle2" sx={{ opacity: 0.9, mt: 1 }}>
              Generated: {new Date(recipe.date).toLocaleString()} |
              üî• HACCP Validated
            </Typography>
          </Box>
          <Button onClick={onClose} sx={{ color: '#fff', minWidth: 'auto' }}>
            <CloseIcon />
          </Button>
        </DialogTitle>

        {/* TOOLBAR */}
        <Box sx={{
          bgcolor: '#2a2a2a',
          p: 2,
          display: 'flex',
          gap: 1,
          flexWrap: 'wrap'
        }}>
          <Button
            startIcon={<PrintIcon />}
            onClick={handlePrint}
            variant="outlined"
            size="small"
            sx={{ borderColor: '#00ffc3', color: '#00ffc3' }}
          >
            Print
          </Button>

          <Button
            startIcon={<ShareIcon />}
            onClick={handleShare}
            variant="outlined"
            size="small"
            sx={{ borderColor: '#00ffc3', color: '#00ffc3' }}
          >
            Share
          </Button>

          <Button
            startIcon={<EditIcon />}
            onClick={() => {
              setEditMode(!editMode);
              setEditedRecipe(recipe.aiResult);
            }}
            variant={editMode ? "contained" : "outlined"}
            size="small"
            sx={{
              borderColor: '#ff6b35',
              color: editMode ? '#fff' : '#ff6b35',
              bgcolor: editMode ? '#ff6b35' : 'transparent'
            }}
          >
            {editMode ? 'Cancel' : 'Edit'}
          </Button>

          {editMode && (
            <Button
              startIcon={<SaveIcon />}
              onClick={handleSaveEdits}
              variant="contained"
              size="small"
              sx={{ bgcolor: '#00ffc3', color: '#000' }}
            >
              Save
            </Button>
          )}

          <Button
            startIcon={<CostIcon />}
            onClick={handleCostCalculation}
            variant="contained"
            size="small"
            sx={{
              bgcolor: '#ffd700',
              color: '#000',
              '&:hover': { bgcolor: '#ffed4e' }
            }}
          >
            üí∞ Cost Analysis
          </Button>
        </Box>

        {/* CONTENT */}
        <DialogContent sx={{
          maxHeight: '60vh',
          overflowY: 'auto',
          bgcolor: '#232323',
          p: 3
        }}>
          {/* INFO CARDS */}
          <Grid container spacing={2} sx={{ mb: 3 }}>
            <Grid item xs={12} md={4}>
              <Paper sx={{ p: 2, bgcolor: '#2a2a2a', textAlign: 'center' }}>
                <Typography variant="h6" color="#00ffc3">Servings</Typography>
                <Typography>{recipe.aiResult.match(/servings?:\s*(\d+)/i)?.[1] || '4'}</Typography>
              </Paper>
            </Grid>
            <Grid item xs={12} md={4}>
              <Paper sx={{ p: 2, bgcolor: '#2a2a2a', textAlign: 'center' }}>
                <MoneyIcon sx={{ color: '#ffd700', fontSize: 30 }} />
                <Typography variant="h6" color="#ffd700">Cost/Serving</Typography>
                <Typography>¬•{costData.costPerServing || '---'}</Typography>
              </Paper>
            </Grid>
            <Grid item xs={12} md={4}>
              <Paper sx={{ p: 2, bgcolor: '#2a2a2a', textAlign: 'center' }}>
                <Chip
                  label="üî• HACCP SAFE"
                  sx={{ bgcolor: '#00ff00', color: '#000', fontWeight: 'bold' }}
                />
              </Paper>
            </Grid>
          </Grid>

          {/* RECIPE CONTENT */}
          {editMode ? (
            <TextField
              fullWidth
              multiline
              rows={20}
              value={editedRecipe}
              onChange={(e) => setEditedRecipe(e.target.value)}
              sx={{
                '& .MuiInputBase-root': {
                  bgcolor: '#1a1a1a',
                  fontFamily: 'monospace',
                  fontSize: '0.95rem'
                }
              }}
            />
          ) : (
            <Paper sx={{
              p: 3,
              bgcolor: '#1a1a1a',
              border: '2px solid #ff6b35',
              minHeight: '400px'
            }}>
              <Typography sx={{
                whiteSpace: "pre-line",
                lineHeight: 1.8,
                fontSize: '1rem',
                fontFamily: 'monospace',
                color: '#e0e0e0'
              }}>
                {recipe.aiResult}
              </Typography>
            </Paper>
          )}

          {/* CHEF NOTES */}
          <Box sx={{ mt: 3 }}>
            <Typography variant="h6" sx={{ color: '#00ffc3', mb: 2 }}>
              üë®‚Äçüç≥ Chef's Notes
            </Typography>
            <TextField
              fullWidth
              multiline
              rows={3}
              value={chefNotes}
              onChange={(e) => setChefNotes(e.target.value)}
              placeholder="Add professional notes, modifications, or cost observations..."
              sx={{
                '& .MuiInputBase-root': {
                  bgcolor: '#2a2a2a',
                  fontSize: '0.9rem'
                }
              }}
            />
          </Box>
        </DialogContent>

        {/* ACTIONS */}
        <DialogActions sx={{
          bgcolor: '#1a1a1a',
          p: 3,
          justifyContent: 'space-between'
        }}>
          <Button
            variant="contained"
            startIcon={<CostIcon />}
            onClick={handleCostCalculation}
            sx={{ bgcolor: '#ffd700', color: '#000' }}
          >
            üí∞ Calculate Cost
          </Button>

          <Box sx={{ display: 'flex', gap: 1 }}>
            <Button
              variant="outlined"
              onClick={onClose}
              sx={{ borderColor: '#666', color: '#666' }}
            >
              Close
            </Button>

            <Button
              variant="contained"
              color="error"
              onClick={() => {
                if (confirm('Delete this recipe?')) {
                  onDelete();
                  onClose();
                }
              }}
            >
              Delete
            </Button>
          </Box>
        </DialogActions>
      </Dialog>

      {/* COST CALCULATOR MODAL */}
      <Dialog
        open={costCalculatorOpen}
        onClose={() => setCostCalculatorOpen(false)}
        maxWidth="md"
        fullWidth
        disableEnforceFocus={true}
        disableAutoFocus={true}
        PaperProps={{ sx: { bgcolor: '#1a1a1a' } }}
      >
        <DialogTitle sx={{ bgcolor: '#ffd700', color: '#000', fontWeight: 'bold' }}>
          üí∞ Cost Analysis - {recipe.prompt}
        </DialogTitle>
        <DialogContent sx={{ bgcolor: '#232323' }}>

          {/* COST SUMMARY */}
          <Grid container spacing={2} sx={{ mb: 3, mt: 1 }}>
            <Grid item xs={12} md={4}>
              <Paper sx={{ p: 2, bgcolor: '#2a2a2a', textAlign: 'center' }}>
                <Typography variant="h4" color="#ffd700">¬•{costData.totalCost}</Typography>
                <Typography color="text.secondary">Total Cost</Typography>
              </Paper>
            </Grid>
            <Grid item xs={12} md={4}>
              <Paper sx={{ p: 2, bgcolor: '#2a2a2a', textAlign: 'center' }}>
                <Typography variant="h4" color="#00ffc3">¬•{costData.costPerServing}</Typography>
                <Typography color="text.secondary">Per Serving</Typography>
              </Paper>
            </Grid>
            <Grid item xs={12} md={4}>
              <Paper sx={{ p: 2, bgcolor: '#2a2a2a', textAlign: 'center' }}>
                <Typography variant="h4" color="#ff6b35">¬•{costData.laborCost}</Typography>
                <Typography color="text.secondary">Labor (20%)</Typography>
              </Paper>
            </Grid>
          </Grid>

          {/* NEW: Food Cost Percentage */}
          {costData.foodCostPercentage && (
            <Box sx={{ mb: 3, p: 2, bgcolor: '#2a2a2a', borderRadius: 2 }}>
              <Typography variant="h6" color="#00ffc3" mb={1}>
                üìä Food Cost Percentage: {costData.foodCostPercentage}%
              </Typography>
              <Typography variant="body2" color="text.secondary">
                Industry Standard: 28-35% | Your Recipe: {costData.foodCostPercentage}%
              </Typography>
            </Box>
          )}

          {/* INGREDIENT BREAKDOWN */}
          <Typography variant="h6" sx={{ color: '#00ffc3', mb: 2 }}>
            üìä Ingredient Breakdown (Tokyo Prices)
          </Typography>

          <TableContainer component={Paper} sx={{ bgcolor: '#2a2a2a' }}>
            <Table size="small">
              <TableHead>
                <TableRow sx={{ bgcolor: '#ff6b35' }}>
                  <TableCell sx={{ color: '#fff', fontWeight: 'bold' }}>Ingredient</TableCell>
                  <TableCell sx={{ color: '#fff', fontWeight: 'bold' }}>Amount</TableCell>
                  <TableCell sx={{ color: '#fff', fontWeight: 'bold' }}>Cost</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {costData.ingredients.map((ing, index) => (
                  <TableRow key={index}>
                    <TableCell sx={{ color: '#e0e0e0' }}>{ing.name}</TableCell>
                    <TableCell sx={{ color: '#e0e0e0' }}>{ing.amount}</TableCell>
                    <TableCell sx={{ color: '#00ffc3', fontWeight: 'bold' }}>¬•{ing.totalCost}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>

          {/* PROFIT ANALYSIS */}
          <Box sx={{ mt: 3, p: 2, bgcolor: '#2a2a2a', borderRadius: 2 }}>
            <Typography variant="h6" color="#ffd700" mb={2}>
              üíº Hotel Profit Analysis
            </Typography>
            <Grid container spacing={2}>
              <Grid item xs={6}>
                <Typography color="text.secondary">Cost: ¬•{costData.costPerServing}</Typography>
                <Typography color="#00ffc3">Selling Price (300%): ¬•{costData.costPerServing * 3}</Typography>
                <Typography color="#ff6b35">Premium (400%): ¬•{costData.costPerServing * 4}</Typography>
              </Grid>
              <Grid item xs={6}>
                <Typography color="text.secondary">Food Cost: {costData.foodCostPercentage || 25}%</Typography>
                <Typography color="#00ffc3">Labor: 20%</Typography>
                <Typography color="#ffd700">Profit: 200-300%</Typography>
              </Grid>
            </Grid>
          </Box>
        </DialogContent>

        <DialogActions sx={{ bgcolor: '#1a1a1a', p: 2 }}>
          <Button
            onClick={() => setCostCalculatorOpen(false)}
            sx={{ color: '#ff6b35' }}
          >
            Close
          </Button>
        </DialogActions>
      </Dialog>
    </>
  );
};

export default ProfessionalRecipeCard;
