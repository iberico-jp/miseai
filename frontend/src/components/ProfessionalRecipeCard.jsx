import React from 'react';
import {
  Dialog,
  DialogContent,
  Button,
  Typography,
  Box,
  Grid,
  Divider,
  IconButton,
  Paper,
  Chip
} from '@mui/material';
import {
  Close as CloseIcon,
  Print as PrintIcon,
  Share as ShareIcon,
  GetApp as DownloadIcon
} from '@mui/icons-material';

const ProfessionalRecipeCard = ({ recipe, onClose }) => {
  const recipeName = recipe?.prompt || 'Untitled Recipe';
  const recipeContent = recipe?.aiResult || recipe?.description || 'No content available';
  const recipeDate = recipe?.date ? new Date(recipe.date).toLocaleDateString() : 'N/A';
  const recipeServings = recipe?.servings || 4;
  const recipePhoto = recipe?.photo || null;

  // Parse ingredients safely
  // In ProfessionalRecipeCard.jsx, replace the parseIngredients function:
const parseIngredients = () => {
  if (recipe?.ingredients && Array.isArray(recipe.ingredients)) {
    return recipe.ingredients.map((ing, index) => {
      if (typeof ing === 'string') {
        return ing;
      }
      if (typeof ing === 'object') {
        // Handle both old and new ingredient formats
        if (ing.name) {
          return `${ing.quantity || ''} ${ing.unit || ''} ${ing.name}`.trim();
        }
        return ing.toString();
      }
      return `Ingredient ${index + 1}`;
    });
  }
  return [];
};


  const ingredients = parseIngredients();

  // Print functionality
  const handlePrint = () => {
    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
      <!DOCTYPE html>
      <html>
      <head>
        <title>${recipeName} - Recipe</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 20px; color: #333; }
          .header { text-align: center; border-bottom: 2px solid #00ffc3; padding-bottom: 20px; margin-bottom: 30px; }
          .recipe-title { color: #00ffc3; font-size: 28px; font-weight: bold; margin: 0; }
          .recipe-meta { color: #666; margin-top: 10px; }
          .section { margin: 30px 0; }
          .section-title { color: #00ffc3; font-size: 20px; font-weight: bold; border-bottom: 1px solid #ddd; padding-bottom: 5px; }
          .ingredients-list { columns: 2; column-gap: 30px; margin-top: 15px; }
          .ingredient { margin: 5px 0; break-inside: avoid; }
          .method { line-height: 1.6; margin-top: 15px; white-space: pre-line; }
          .recipe-image { max-width: 300px; margin: 20px auto; display: block; border-radius: 8px; }
          @media print { body { margin: 0; } }
        </style>
      </head>
      <body>
        <div class="header">
          <h1 class="recipe-title">${recipeName}</h1>
          <div class="recipe-meta">Servings: ${recipeServings} | Created: ${recipeDate}</div>
        </div>

        ${recipePhoto ? `<img src="${recipePhoto}" alt="${recipeName}" class="recipe-image" />` : ''}

        ${ingredients.length > 0 ? `
          <div class="section">
            <h2 class="section-title">Ingredients (${ingredients.length})</h2>
            <div class="ingredients-list">
              ${ingredients.map(ing => `<div class="ingredient">â€¢ ${ing}</div>`).join('')}
            </div>
          </div>
        ` : ''}

        <div class="section">
          <h2 class="section-title">Method & Instructions</h2>
          <div class="method">${recipeContent}</div>
        </div>

        <div style="text-align: center; margin-top: 50px; color: #666; font-size: 12px;">
          Generated by MiseAI Chef's Vault - ${new Date().toLocaleDateString()}
        </div>
      </body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  // Share functionality
  const handleShare = async () => {
    const shareData = {
      title: recipeName,
      text: `Check out this recipe: ${recipeName}\n\nIngredients: ${ingredients.join(', ')}\n\nMethod: ${recipeContent.substring(0, 200)}...`,
      url: window.location.href
    };

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (err) {
        console.log('Share cancelled');
      }
    } else {
      // Fallback - copy to clipboard
      navigator.clipboard.writeText(`${shareData.title}\n\n${shareData.text}`);
      alert('Recipe copied to clipboard!');
    }
  };

  return (
    <Dialog
      open={true}
      onClose={onClose}
      maxWidth="md"
      fullWidth
      PaperProps={{
        style: {
          backgroundColor: '#1a1a1a',
          color: '#ffffff',
          maxHeight: '90vh',
          margin: '20px'
        }
      }}
      // FIXED: Prevent scroll issues
      disableScrollLock={true}
      keepMounted={false}
    >
      <DialogContent sx={{ backgroundColor: '#1a1a1a', color: '#ffffff', p: 0 }}>
        {/* Header with controls */}
        <Box sx={{
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          p: 3,
          borderBottom: '1px solid #333'
        }}>
          <Typography variant="h4" sx={{ color: '#00ffc3', fontWeight: 'bold' }}>
            {recipeName}
          </Typography>
          <Box sx={{ display: 'flex', gap: 1 }}>
            <IconButton onClick={handlePrint} sx={{ color: '#00ffc3' }} title="Print Recipe">
              <PrintIcon />
            </IconButton>
            <IconButton onClick={handleShare} sx={{ color: '#00ffc3' }} title="Share Recipe">
              <ShareIcon />
            </IconButton>
            <IconButton onClick={onClose} sx={{ color: '#ffffff' }}>
              <CloseIcon />
            </IconButton>
          </Box>
        </Box>

        {/* Recipe content */}
        <Box sx={{ p: 3 }}>
          {/* Recipe Photo */}
          {recipePhoto && (
            <Box sx={{ mb: 3, textAlign: 'center' }}>
              <img
                src={recipePhoto}
                alt={recipeName}
                style={{
                  maxWidth: '100%',
                  maxHeight: '300px',
                  borderRadius: '8px',
                  objectFit: 'cover'
                }}
              />
            </Box>
          )}

          {/* Recipe Stats */}
          <Grid container spacing={2} sx={{ mb: 3 }}>
            <Grid item xs={4}>
              <Paper sx={{ backgroundColor: '#2a2a2a', p: 2, textAlign: 'center' }}>
                <Typography variant="h6" sx={{ color: '#00ffc3' }}>
                  {recipeServings}
                </Typography>
                <Typography variant="body2" sx={{ color: '#ffffff' }}>
                  Servings
                </Typography>
              </Paper>
            </Grid>
            <Grid item xs={4}>
              <Paper sx={{ backgroundColor: '#2a2a2a', p: 2, textAlign: 'center' }}>
                <Typography variant="h6" sx={{ color: '#00ffc3' }}>
                  {ingredients.length}
                </Typography>
                <Typography variant="body2" sx={{ color: '#ffffff' }}>
                  Ingredients
                </Typography>
              </Paper>
            </Grid>
            <Grid item xs={4}>
              <Paper sx={{ backgroundColor: '#2a2a2a', p: 2, textAlign: 'center' }}>
                <Typography variant="h6" sx={{ color: '#00ffc3' }}>
                  {recipeDate}
                </Typography>
                <Typography variant="body2" sx={{ color: '#ffffff' }}>
                  Created
                </Typography>
              </Paper>
            </Grid>
          </Grid>

          <Divider sx={{ backgroundColor: '#333333', mb: 3 }} />

          {/* Ingredients */}
          {ingredients.length > 0 && (
            <Box sx={{ mb: 3 }}>
              <Typography variant="h5" sx={{ color: '#00ffc3', mb: 2 }}>
                Ingredients ({ingredients.length})
              </Typography>
              <Grid container spacing={1}>
                {ingredients.map((ingredient, index) => (
                  <Grid item xs={12} sm={6} key={index}>
                    <Chip
                      label={ingredient}
                      variant="outlined"
                      sx={{
                        color: '#ffffff',
                        borderColor: '#00ffc3',
                        backgroundColor: '#2a2a2a',
                        mb: 0.5,
                        width: '100%',
                        justifyContent: 'flex-start',
                        height: 'auto',
                        '& .MuiChip-label': {
                          whiteSpace: 'normal',
                          textAlign: 'left'
                        }
                      }}
                    />
                  </Grid>
                ))}
              </Grid>
            </Box>
          )}

          <Divider sx={{ backgroundColor: '#333333', mb: 3 }} />

          {/* Method & Instructions */}
          <Box>
            <Typography variant="h5" sx={{ color: '#00ffc3', mb: 2 }}>
              Method & Instructions
            </Typography>
            <Paper sx={{ backgroundColor: '#2a2a2a', p: 3 }}>
              <Typography
                variant="body1"
                sx={{
                  color: '#ffffff',
                  lineHeight: 1.8,
                  whiteSpace: 'pre-line'
                }}
              >
                {recipeContent}
              </Typography>
            </Paper>
          </Box>

          {/* Action buttons */}
          <Box sx={{ display: 'flex', gap: 2, justifyContent: 'center', mt: 4 }}>
            <Button
              variant="contained"
              startIcon={<PrintIcon />}
              onClick={handlePrint}
              sx={{ backgroundColor: '#00ffc3', color: '#000000' }}
            >
              Print Recipe
            </Button>
            <Button
              variant="outlined"
              startIcon={<ShareIcon />}
              onClick={handleShare}
              sx={{
                color: '#00ffc3',
                borderColor: '#00ffc3',
                '&:hover': { backgroundColor: 'rgba(0, 255, 195, 0.1)' }
              }}
            >
              Share Recipe
            </Button>
          </Box>
        </Box>
      </DialogContent>
    </Dialog>
  );
};

export default ProfessionalRecipeCard;
